{
  "reportTitle": "pro-gulp",
  "stats": {
    "suites": 14,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2015-06-12T22:20:04.642Z",
    "end": "2015-06-12T22:20:05.111Z",
    "duration": 469,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "The `task` method",
        "suites": [],
        "tests": [
          {
            "title": "should behave _like_ a getter when called with only one argument",
            "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
            "isRoot": false,
            "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          },
          {
            "title": "should behave _like_ a setter when called with more than one argument",
            "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/pro-gulp.js",
        "uuid": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
        "passes": [
          {
            "title": "should behave _like_ a getter when called with only one argument",
            "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
            "isRoot": false,
            "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          },
          {
            "title": "should behave _like_ a setter when called with more than one argument",
            "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "The function returned by the `task` method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The function returned by the `task` method should return a promise",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().should.be.a.Promise;",
            "isRoot": false,
            "uuid": "ff86fd3d-e823-45eb-8f86-93a4a89a0b2a",
            "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
            "skipped": false
          },
          {
            "title": "should call the function(s) passed as second (and third) argument [1 function]",
            "fullTitle": "The function returned by the `task` method should call the function(s) passed as second (and third) argument [1 function]",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spy_0 = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>, spy_0);<br><span class=\"hljs-keyword\">return</span> proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy_0.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
            "isRoot": false,
            "uuid": "ab3a0140-6197-4fd1-a1c7-2d07ade01c9d",
            "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
            "skipped": false
          },
          {
            "title": "should call the function(s) passed as second (and third) argument [2 functions]",
            "fullTitle": "The function returned by the `task` method should call the function(s) passed as second (and third) argument [2 functions]",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spy_0 = sinon.spy();<br><span class=\"hljs-keyword\">var</span> spy_1 = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>, spy_0, spy_1);<br><span class=\"hljs-keyword\">return</span> proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy_0.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spy_1.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
            "isRoot": false,
            "uuid": "b5e7012c-fa57-4759-bf38-dd3b78b3a03f",
            "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/pro-gulp.js",
        "uuid": "f6bc25a5-596a-4a49-9919-bb823f979562",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
        "passes": [
          {
            "title": "should return a promise",
            "fullTitle": "The function returned by the `task` method should return a promise",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().should.be.a.Promise;",
            "isRoot": false,
            "uuid": "ff86fd3d-e823-45eb-8f86-93a4a89a0b2a",
            "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
            "skipped": false
          },
          {
            "title": "should call the function(s) passed as second (and third) argument [1 function]",
            "fullTitle": "The function returned by the `task` method should call the function(s) passed as second (and third) argument [1 function]",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spy_0 = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>, spy_0);<br><span class=\"hljs-keyword\">return</span> proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy_0.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
            "isRoot": false,
            "uuid": "ab3a0140-6197-4fd1-a1c7-2d07ade01c9d",
            "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
            "skipped": false
          },
          {
            "title": "should call the function(s) passed as second (and third) argument [2 functions]",
            "fullTitle": "The function returned by the `task` method should call the function(s) passed as second (and third) argument [2 functions]",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spy_0 = sinon.spy();<br><span class=\"hljs-keyword\">var</span> spy_1 = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>, spy_0, spy_1);<br><span class=\"hljs-keyword\">return</span> proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy_0.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spy_1.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
            "isRoot": false,
            "uuid": "b5e7012c-fa57-4759-bf38-dd3b78b3a03f",
            "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5
      },
      {
        "title": "The `parallel` method",
        "suites": [],
        "tests": [
          {
            "title": "should return a function",
            "fullTitle": "The `parallel` method should return a function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.parallel();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "155606c3-946a-4872-8327-376c9a0643a9",
            "parentUUID": "f23b3827-7f1b-413b-a8d8-1849aa86b308",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/pro-gulp.js",
        "uuid": "f23b3827-7f1b-413b-a8d8-1849aa86b308",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
        "passes": [
          {
            "title": "should return a function",
            "fullTitle": "The `parallel` method should return a function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.parallel();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "155606c3-946a-4872-8327-376c9a0643a9",
            "parentUUID": "f23b3827-7f1b-413b-a8d8-1849aa86b308",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "The function returned by the `parallel` method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The function returned by the `parallel` method should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.parallel([]);<br>ret().should.be.a.Promise;",
            "isRoot": false,
            "uuid": "db13da03-8aa3-4765-8dbe-b1bf55ee09e0",
            "parentUUID": "506b8f2a-8907-4392-ba63-ff9a8a8bbd7b",
            "skipped": false
          },
          {
            "title": "should execute tasks in parallel (order does not matter)",
            "fullTitle": "The function returned by the `parallel` method should execute tasks in parallel (order does not matter)",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"task_0\"</span>, spy);<br>proGulp.task(<span class=\"hljs-string\">\"task_1\"</span>, spy);<br><span class=\"hljs-keyword\">var</span> ret = proGulp.parallel([<span class=\"hljs-string\">\"task_0\"</span>, <span class=\"hljs-string\">\"task_1\"</span>]);<br><span class=\"hljs-keyword\">return</span> ret().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy.calledTwice.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
            "isRoot": false,
            "uuid": "7efc9aee-1ff6-4edf-a5f1-28c00343c2be",
            "parentUUID": "506b8f2a-8907-4392-ba63-ff9a8a8bbd7b",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/pro-gulp.js",
        "uuid": "506b8f2a-8907-4392-ba63-ff9a8a8bbd7b",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
        "passes": [
          {
            "title": "should return a promise",
            "fullTitle": "The function returned by the `parallel` method should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.parallel([]);<br>ret().should.be.a.Promise;",
            "isRoot": false,
            "uuid": "db13da03-8aa3-4765-8dbe-b1bf55ee09e0",
            "parentUUID": "506b8f2a-8907-4392-ba63-ff9a8a8bbd7b",
            "skipped": false
          },
          {
            "title": "should execute tasks in parallel (order does not matter)",
            "fullTitle": "The function returned by the `parallel` method should execute tasks in parallel (order does not matter)",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"task_0\"</span>, spy);<br>proGulp.task(<span class=\"hljs-string\">\"task_1\"</span>, spy);<br><span class=\"hljs-keyword\">var</span> ret = proGulp.parallel([<span class=\"hljs-string\">\"task_0\"</span>, <span class=\"hljs-string\">\"task_1\"</span>]);<br><span class=\"hljs-keyword\">return</span> ret().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy.calledTwice.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
            "isRoot": false,
            "uuid": "7efc9aee-1ff6-4edf-a5f1-28c00343c2be",
            "parentUUID": "506b8f2a-8907-4392-ba63-ff9a8a8bbd7b",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The `sequence` method",
        "suites": [],
        "tests": [
          {
            "title": "should return a function",
            "fullTitle": "The `sequence` method should return a function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.sequence();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "0c1b8801-8747-4d03-a155-e24462d7f765",
            "parentUUID": "43b43938-48c5-49f2-b7d0-758cd8c51e9b",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/pro-gulp.js",
        "uuid": "43b43938-48c5-49f2-b7d0-758cd8c51e9b",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
        "passes": [
          {
            "title": "should return a function",
            "fullTitle": "The `sequence` method should return a function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.sequence();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "0c1b8801-8747-4d03-a155-e24462d7f765",
            "parentUUID": "43b43938-48c5-49f2-b7d0-758cd8c51e9b",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "The function returned by the `sequence` method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The function returned by the `sequence` method should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.sequence([]);<br>ret().should.be.a.Promise;",
            "isRoot": false,
            "uuid": "7d1428ef-ffd2-4bc5-a506-058a33cc6de2",
            "parentUUID": "7fa7156d-969c-43b9-82f8-2cd62631d241",
            "skipped": false
          },
          {
            "title": "should execute tasks in sequence (order does matter)",
            "fullTitle": "The function returned by the `sequence` method should execute tasks in sequence (order does matter)",
            "timedOut": false,
            "duration": 423,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spies = [];<br><span class=\"hljs-keyword\">var</span> getTime = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> timestamp = process.hrtime();<br>    <span class=\"hljs-keyword\">return</span> timestamp[<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">1e9</span> + timestamp[<span class=\"hljs-number\">1</span>];<br>};<br><span class=\"hljs-keyword\">var</span> createSpy = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">n</span>) </span>{<br>    spies[n] = {};<br>    spies[n].fn = sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        spies[n].start = getTime();<br>        <span class=\"hljs-keyword\">return</span> BPromise.delay(<span class=\"hljs-number\">100</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>            spies[n].end = getTime();<br>        });<br>    });<br>};<br>createSpy(<span class=\"hljs-number\">0</span>);<br>createSpy(<span class=\"hljs-number\">1</span>);<br>createSpy(<span class=\"hljs-number\">2</span>);<br>createSpy(<span class=\"hljs-number\">3</span>);<br>proGulp.task(<span class=\"hljs-string\">\"task_0\"</span>, spies[<span class=\"hljs-number\">0</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_1\"</span>, spies[<span class=\"hljs-number\">1</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_2\"</span>, spies[<span class=\"hljs-number\">2</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_3\"</span>, spies[<span class=\"hljs-number\">3</span>].fn);<br><span class=\"hljs-keyword\">var</span> ret = proGulp.sequence([<br>    <span class=\"hljs-string\">\"task_0\"</span>,<br>    <span class=\"hljs-string\">\"task_1\"</span>,<br>    <span class=\"hljs-string\">\"task_2\"</span>,<br>    <span class=\"hljs-string\">\"task_3\"</span><br>]);<br><span class=\"hljs-keyword\">return</span> ret().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-comment\">// Check they have been called</span><br>    spies[<span class=\"hljs-number\">0</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">1</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">2</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">3</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-comment\">// Check they have been called in the right order</span><br>    (spies[<span class=\"hljs-number\">0</span>].start &lt; spies[<span class=\"hljs-number\">0</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">0</span>].end &lt; spies[<span class=\"hljs-number\">1</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">1</span>].start &lt; spies[<span class=\"hljs-number\">1</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">1</span>].end &lt; spies[<span class=\"hljs-number\">2</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">2</span>].start &lt; spies[<span class=\"hljs-number\">2</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">2</span>].end &lt; spies[<span class=\"hljs-number\">3</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">3</span>].start &lt; spies[<span class=\"hljs-number\">3</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
            "isRoot": false,
            "uuid": "6274ce3e-624f-4f8e-99f0-3908c805c845",
            "parentUUID": "7fa7156d-969c-43b9-82f8-2cd62631d241",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/pro-gulp.js",
        "uuid": "7fa7156d-969c-43b9-82f8-2cd62631d241",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
        "passes": [
          {
            "title": "should return a promise",
            "fullTitle": "The function returned by the `sequence` method should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.sequence([]);<br>ret().should.be.a.Promise;",
            "isRoot": false,
            "uuid": "7d1428ef-ffd2-4bc5-a506-058a33cc6de2",
            "parentUUID": "7fa7156d-969c-43b9-82f8-2cd62631d241",
            "skipped": false
          },
          {
            "title": "should execute tasks in sequence (order does matter)",
            "fullTitle": "The function returned by the `sequence` method should execute tasks in sequence (order does matter)",
            "timedOut": false,
            "duration": 423,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spies = [];<br><span class=\"hljs-keyword\">var</span> getTime = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> timestamp = process.hrtime();<br>    <span class=\"hljs-keyword\">return</span> timestamp[<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">1e9</span> + timestamp[<span class=\"hljs-number\">1</span>];<br>};<br><span class=\"hljs-keyword\">var</span> createSpy = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">n</span>) </span>{<br>    spies[n] = {};<br>    spies[n].fn = sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        spies[n].start = getTime();<br>        <span class=\"hljs-keyword\">return</span> BPromise.delay(<span class=\"hljs-number\">100</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>            spies[n].end = getTime();<br>        });<br>    });<br>};<br>createSpy(<span class=\"hljs-number\">0</span>);<br>createSpy(<span class=\"hljs-number\">1</span>);<br>createSpy(<span class=\"hljs-number\">2</span>);<br>createSpy(<span class=\"hljs-number\">3</span>);<br>proGulp.task(<span class=\"hljs-string\">\"task_0\"</span>, spies[<span class=\"hljs-number\">0</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_1\"</span>, spies[<span class=\"hljs-number\">1</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_2\"</span>, spies[<span class=\"hljs-number\">2</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_3\"</span>, spies[<span class=\"hljs-number\">3</span>].fn);<br><span class=\"hljs-keyword\">var</span> ret = proGulp.sequence([<br>    <span class=\"hljs-string\">\"task_0\"</span>,<br>    <span class=\"hljs-string\">\"task_1\"</span>,<br>    <span class=\"hljs-string\">\"task_2\"</span>,<br>    <span class=\"hljs-string\">\"task_3\"</span><br>]);<br><span class=\"hljs-keyword\">return</span> ret().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-comment\">// Check they have been called</span><br>    spies[<span class=\"hljs-number\">0</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">1</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">2</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">3</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-comment\">// Check they have been called in the right order</span><br>    (spies[<span class=\"hljs-number\">0</span>].start &lt; spies[<span class=\"hljs-number\">0</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">0</span>].end &lt; spies[<span class=\"hljs-number\">1</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">1</span>].start &lt; spies[<span class=\"hljs-number\">1</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">1</span>].end &lt; spies[<span class=\"hljs-number\">2</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">2</span>].start &lt; spies[<span class=\"hljs-number\">2</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">2</span>].end &lt; spies[<span class=\"hljs-number\">3</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">3</span>].start &lt; spies[<span class=\"hljs-number\">3</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
            "isRoot": false,
            "uuid": "6274ce3e-624f-4f8e-99f0-3908c805c845",
            "parentUUID": "7fa7156d-969c-43b9-82f8-2cd62631d241",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 423
      },
      {
        "title": "The `log.start` function",
        "suites": [],
        "tests": [
          {
            "title": "should attach a Date object to the property `start` of its context",
            "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/log.js",
        "uuid": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
        "passes": [
          {
            "title": "should attach a Date object to the property `start` of its context",
            "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The `log.end` function",
        "suites": [],
        "tests": [
          {
            "title": "should attach a Date object to the property `end` of its context",
            "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/log.js",
        "uuid": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
        "passes": [
          {
            "title": "should attach a Date object to the property `end` of its context",
            "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "The `promisify` function",
        "suites": [],
        "tests": [
          {
            "title": "should returned a function",
            "fullTitle": "The `promisify` function should returned a function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = promisify();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "87ae30c5-4207-49de-867c-bd480e77592c",
            "parentUUID": "77fcc2aa-77bd-4e95-b934-9e7a42e6160d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/promisify.js",
        "uuid": "77fcc2aa-77bd-4e95-b934-9e7a42e6160d",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/promisify.js",
        "passes": [
          {
            "title": "should returned a function",
            "fullTitle": "The `promisify` function should returned a function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ret = promisify();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "87ae30c5-4207-49de-867c-bd480e77592c",
            "parentUUID": "77fcc2aa-77bd-4e95-b934-9e7a42e6160d",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "The function returned by `promisify`",
        "suites": [],
        "tests": [
          {
            "title": "should invoke the function supplied to `promisify`, when called",
            "fullTitle": "The function returned by `promisify` should invoke the function supplied to `promisify`, when called",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br><span class=\"hljs-keyword\">var</span> fn = promisify(spy);<br>fn();<br>spy.called.should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "a08b446e-6ab3-4d32-bd85-6cc93a5b3e22",
            "parentUUID": "fcfa4178-84f4-417e-b817-435967c47dcf",
            "skipped": false
          },
          {
            "title": "should return a promise",
            "fullTitle": "The function returned by `promisify` should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br><span class=\"hljs-keyword\">var</span> fn = promisify(spy);<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>ret.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "f3550ee2-2124-4fff-8592-e2596ec862b1",
            "parentUUID": "fcfa4178-84f4-417e-b817-435967c47dcf",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/promisify.js",
        "uuid": "fcfa4178-84f4-417e-b817-435967c47dcf",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/promisify.js",
        "passes": [
          {
            "title": "should invoke the function supplied to `promisify`, when called",
            "fullTitle": "The function returned by `promisify` should invoke the function supplied to `promisify`, when called",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br><span class=\"hljs-keyword\">var</span> fn = promisify(spy);<br>fn();<br>spy.called.should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "a08b446e-6ab3-4d32-bd85-6cc93a5b3e22",
            "parentUUID": "fcfa4178-84f4-417e-b817-435967c47dcf",
            "skipped": false
          },
          {
            "title": "should return a promise",
            "fullTitle": "The function returned by `promisify` should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br><span class=\"hljs-keyword\">var</span> fn = promisify(spy);<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>ret.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "f3550ee2-2124-4fff-8592-e2596ec862b1",
            "parentUUID": "fcfa4178-84f4-417e-b817-435967c47dcf",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "When the supplied function returns a stream, the promise returned by the wrapper",
        "suites": [],
        "tests": [
          {
            "title": "should be fulfilled when the stream ends",
            "fullTitle": "When the supplied function returns a stream, the promise returned by the wrapper should be fulfilled when the stream ends",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> stream = <span class=\"hljs-keyword\">new</span> events.EventEmitter();<br>stream.pipe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noop</span> (<span class=\"hljs-params\"></span>) </span>{};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> stream;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>stream.emit(<span class=\"hljs-string\">\"end\"</span>);<br><span class=\"hljs-keyword\">return</span> ret.should.be.fulfilled;",
            "isRoot": false,
            "uuid": "6899b2bb-6c91-4c95-95bb-cbbd652c5e38",
            "parentUUID": "7c67d61c-eca2-4118-accd-dd70f342c5f3",
            "skipped": false
          },
          {
            "title": "should be rejected when the stream errors",
            "fullTitle": "When the supplied function returns a stream, the promise returned by the wrapper should be rejected when the stream errors",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> stream = <span class=\"hljs-keyword\">new</span> events.EventEmitter();<br>stream.pipe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noop</span> (<span class=\"hljs-params\"></span>) </span>{};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> stream;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>stream.emit(<span class=\"hljs-string\">\"error\"</span>);<br><span class=\"hljs-keyword\">return</span> ret.should.be.rejected;",
            "isRoot": false,
            "uuid": "626f9b20-3de8-4c74-99cf-009502d3f125",
            "parentUUID": "7c67d61c-eca2-4118-accd-dd70f342c5f3",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/promisify.js",
        "uuid": "7c67d61c-eca2-4118-accd-dd70f342c5f3",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/promisify.js",
        "passes": [
          {
            "title": "should be fulfilled when the stream ends",
            "fullTitle": "When the supplied function returns a stream, the promise returned by the wrapper should be fulfilled when the stream ends",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> stream = <span class=\"hljs-keyword\">new</span> events.EventEmitter();<br>stream.pipe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noop</span> (<span class=\"hljs-params\"></span>) </span>{};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> stream;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>stream.emit(<span class=\"hljs-string\">\"end\"</span>);<br><span class=\"hljs-keyword\">return</span> ret.should.be.fulfilled;",
            "isRoot": false,
            "uuid": "6899b2bb-6c91-4c95-95bb-cbbd652c5e38",
            "parentUUID": "7c67d61c-eca2-4118-accd-dd70f342c5f3",
            "skipped": false
          },
          {
            "title": "should be rejected when the stream errors",
            "fullTitle": "When the supplied function returns a stream, the promise returned by the wrapper should be rejected when the stream errors",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> stream = <span class=\"hljs-keyword\">new</span> events.EventEmitter();<br>stream.pipe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noop</span> (<span class=\"hljs-params\"></span>) </span>{};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> stream;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>stream.emit(<span class=\"hljs-string\">\"error\"</span>);<br><span class=\"hljs-keyword\">return</span> ret.should.be.rejected;",
            "isRoot": false,
            "uuid": "626f9b20-3de8-4c74-99cf-009502d3f125",
            "parentUUID": "7c67d61c-eca2-4118-accd-dd70f342c5f3",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "When the supplied function returns a promise, the promise returned by the wrapper",
        "suites": [],
        "tests": [
          {
            "title": "should be the same promise proxied through",
            "fullTitle": "When the supplied function returns a promise, the promise returned by the wrapper should be the same promise proxied through",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = BPromise.resolve();<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> promise;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>ret.should.equal(promise);",
            "isRoot": false,
            "uuid": "53854c46-df81-403b-acff-f7a1cee66a32",
            "parentUUID": "11218c5c-0197-4816-9092-c65ebe3d4be3",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/promisify.js",
        "uuid": "11218c5c-0197-4816-9092-c65ebe3d4be3",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/promisify.js",
        "passes": [
          {
            "title": "should be the same promise proxied through",
            "fullTitle": "When the supplied function returns a promise, the promise returned by the wrapper should be the same promise proxied through",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = BPromise.resolve();<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> promise;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>ret.should.equal(promise);",
            "isRoot": false,
            "uuid": "53854c46-df81-403b-acff-f7a1cee66a32",
            "parentUUID": "11218c5c-0197-4816-9092-c65ebe3d4be3",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "When the supplied function returns a value, the promise returned by the wrapper",
        "suites": [],
        "tests": [
          {
            "title": "should be a promise wrapper around that value",
            "fullTitle": "When the supplied function returns a value, the promise returned by the wrapper should be a promise wrapper around that value",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> value = {};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> value;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br><span class=\"hljs-keyword\">return</span> ret.should.eventually.equal(value);",
            "isRoot": false,
            "uuid": "974825f3-dd1e-42c2-9821-0095c1587a3b",
            "parentUUID": "b71a1bd2-4267-48b7-a489-5ddf03ba6f9a",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/promisify.js",
        "uuid": "b71a1bd2-4267-48b7-a489-5ddf03ba6f9a",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/promisify.js",
        "passes": [
          {
            "title": "should be a promise wrapper around that value",
            "fullTitle": "When the supplied function returns a value, the promise returned by the wrapper should be a promise wrapper around that value",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> value = {};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> value;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br><span class=\"hljs-keyword\">return</span> ret.should.eventually.equal(value);",
            "isRoot": false,
            "uuid": "974825f3-dd1e-42c2-9821-0095c1587a3b",
            "parentUUID": "b71a1bd2-4267-48b7-a489-5ddf03ba6f9a",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "When the supplied function throws, the wrapper",
        "suites": [],
        "tests": [
          {
            "title": "should throw",
            "fullTitle": "When the supplied function throws, the wrapper should throw",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> error = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">throw</span> error;<br>});<br>fn.should.throw(error);",
            "isRoot": false,
            "uuid": "368cfaab-502c-4b81-a87b-aa0f276bbd5a",
            "parentUUID": "1c0a6a13-8d17-4963-89fe-75a97983c2e9",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/promisify.js",
        "uuid": "1c0a6a13-8d17-4963-89fe-75a97983c2e9",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/promisify.js",
        "passes": [
          {
            "title": "should throw",
            "fullTitle": "When the supplied function throws, the wrapper should throw",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> error = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">throw</span> error;<br>});<br>fn.should.throw(error);",
            "isRoot": false,
            "uuid": "368cfaab-502c-4b81-a87b-aa0f276bbd5a",
            "parentUUID": "1c0a6a13-8d17-4963-89fe-75a97983c2e9",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "d3af54cf-2049-4831-8f61-5ae1a7822d7e",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should behave _like_ a getter when called with only one argument",
      "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
      "isRoot": false,
      "uuid": "e42885af-f641-4ce2-b784-5100849e0387",
      "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
      "skipped": false
    },
    {
      "title": "should behave _like_ a setter when called with more than one argument",
      "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "258f60d5-98df-4414-9786-ac55906d84dd",
      "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The function returned by the `task` method should return a promise",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().should.be.a.Promise;",
      "isRoot": false,
      "uuid": "b43b495e-a2fa-4fb6-9f0e-e20919c8443d",
      "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
      "skipped": false
    },
    {
      "title": "should call the function(s) passed as second (and third) argument [1 function]",
      "fullTitle": "The function returned by the `task` method should call the function(s) passed as second (and third) argument [1 function]",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spy_0 = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>, spy_0);<br><span class=\"hljs-keyword\">return</span> proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy_0.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
      "isRoot": false,
      "uuid": "382af0ed-d841-4aed-a999-e1de3521268c",
      "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
      "skipped": false
    },
    {
      "title": "should call the function(s) passed as second (and third) argument [2 functions]",
      "fullTitle": "The function returned by the `task` method should call the function(s) passed as second (and third) argument [2 functions]",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spy_0 = sinon.spy();<br><span class=\"hljs-keyword\">var</span> spy_1 = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>, spy_0, spy_1);<br><span class=\"hljs-keyword\">return</span> proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy_0.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spy_1.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
      "isRoot": false,
      "uuid": "47c5a5d9-daec-44c9-b234-b8839e427c20",
      "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
      "skipped": false
    },
    {
      "title": "should return a function",
      "fullTitle": "The `parallel` method should return a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.parallel();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "88508501-5cad-460e-a908-df119ccab2ab",
      "parentUUID": "f23b3827-7f1b-413b-a8d8-1849aa86b308",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The function returned by the `parallel` method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.parallel([]);<br>ret().should.be.a.Promise;",
      "isRoot": false,
      "uuid": "96de6677-d01d-4061-a0b7-b935b17b32c6",
      "parentUUID": "506b8f2a-8907-4392-ba63-ff9a8a8bbd7b",
      "skipped": false
    },
    {
      "title": "should execute tasks in parallel (order does not matter)",
      "fullTitle": "The function returned by the `parallel` method should execute tasks in parallel (order does not matter)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"task_0\"</span>, spy);<br>proGulp.task(<span class=\"hljs-string\">\"task_1\"</span>, spy);<br><span class=\"hljs-keyword\">var</span> ret = proGulp.parallel([<span class=\"hljs-string\">\"task_0\"</span>, <span class=\"hljs-string\">\"task_1\"</span>]);<br><span class=\"hljs-keyword\">return</span> ret().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy.calledTwice.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
      "isRoot": false,
      "uuid": "52b343e4-68f2-409d-8f51-2cb7a5862fe8",
      "parentUUID": "506b8f2a-8907-4392-ba63-ff9a8a8bbd7b",
      "skipped": false
    },
    {
      "title": "should return a function",
      "fullTitle": "The `sequence` method should return a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.sequence();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "d33796d0-7fe1-44e4-940c-7a4de8e73de5",
      "parentUUID": "43b43938-48c5-49f2-b7d0-758cd8c51e9b",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The function returned by the `sequence` method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.sequence([]);<br>ret().should.be.a.Promise;",
      "isRoot": false,
      "uuid": "40a58643-114a-45e6-b14e-794be1cb72c3",
      "parentUUID": "7fa7156d-969c-43b9-82f8-2cd62631d241",
      "skipped": false
    },
    {
      "title": "should execute tasks in sequence (order does matter)",
      "fullTitle": "The function returned by the `sequence` method should execute tasks in sequence (order does matter)",
      "timedOut": false,
      "duration": 423,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spies = [];<br><span class=\"hljs-keyword\">var</span> getTime = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> timestamp = process.hrtime();<br>    <span class=\"hljs-keyword\">return</span> timestamp[<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">1e9</span> + timestamp[<span class=\"hljs-number\">1</span>];<br>};<br><span class=\"hljs-keyword\">var</span> createSpy = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">n</span>) </span>{<br>    spies[n] = {};<br>    spies[n].fn = sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        spies[n].start = getTime();<br>        <span class=\"hljs-keyword\">return</span> BPromise.delay(<span class=\"hljs-number\">100</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>            spies[n].end = getTime();<br>        });<br>    });<br>};<br>createSpy(<span class=\"hljs-number\">0</span>);<br>createSpy(<span class=\"hljs-number\">1</span>);<br>createSpy(<span class=\"hljs-number\">2</span>);<br>createSpy(<span class=\"hljs-number\">3</span>);<br>proGulp.task(<span class=\"hljs-string\">\"task_0\"</span>, spies[<span class=\"hljs-number\">0</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_1\"</span>, spies[<span class=\"hljs-number\">1</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_2\"</span>, spies[<span class=\"hljs-number\">2</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_3\"</span>, spies[<span class=\"hljs-number\">3</span>].fn);<br><span class=\"hljs-keyword\">var</span> ret = proGulp.sequence([<br>    <span class=\"hljs-string\">\"task_0\"</span>,<br>    <span class=\"hljs-string\">\"task_1\"</span>,<br>    <span class=\"hljs-string\">\"task_2\"</span>,<br>    <span class=\"hljs-string\">\"task_3\"</span><br>]);<br><span class=\"hljs-keyword\">return</span> ret().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-comment\">// Check they have been called</span><br>    spies[<span class=\"hljs-number\">0</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">1</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">2</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">3</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-comment\">// Check they have been called in the right order</span><br>    (spies[<span class=\"hljs-number\">0</span>].start &lt; spies[<span class=\"hljs-number\">0</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">0</span>].end &lt; spies[<span class=\"hljs-number\">1</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">1</span>].start &lt; spies[<span class=\"hljs-number\">1</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">1</span>].end &lt; spies[<span class=\"hljs-number\">2</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">2</span>].start &lt; spies[<span class=\"hljs-number\">2</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">2</span>].end &lt; spies[<span class=\"hljs-number\">3</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">3</span>].start &lt; spies[<span class=\"hljs-number\">3</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
      "isRoot": false,
      "uuid": "645bbf3b-062f-471b-84dd-d2d02a01e42d",
      "parentUUID": "7fa7156d-969c-43b9-82f8-2cd62631d241",
      "skipped": false
    },
    {
      "title": "should attach a Date object to the property `start` of its context",
      "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
      "isRoot": false,
      "uuid": "e7966b49-67d5-4ada-9ecc-5e1eef2a88fc",
      "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
      "skipped": false
    },
    {
      "title": "should call the `gulp-util.log` function",
      "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "507fcaba-0850-45c4-999b-096766daddf1",
      "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
      "skipped": false
    },
    {
      "title": "should attach a Date object to the property `end` of its context",
      "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
      "isRoot": false,
      "uuid": "534b4e77-3e10-4eda-acb3-d6a6f594f16f",
      "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
      "skipped": false
    },
    {
      "title": "should call the `gulp-util.log` function",
      "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "fb4d742d-fa7f-445e-8749-f98e9060079f",
      "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
      "skipped": false
    },
    {
      "title": "should returned a function",
      "fullTitle": "The `promisify` function should returned a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = promisify();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "8ac45766-1273-42ef-80c1-c32829849417",
      "parentUUID": "77fcc2aa-77bd-4e95-b934-9e7a42e6160d",
      "skipped": false
    },
    {
      "title": "should invoke the function supplied to `promisify`, when called",
      "fullTitle": "The function returned by `promisify` should invoke the function supplied to `promisify`, when called",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br><span class=\"hljs-keyword\">var</span> fn = promisify(spy);<br>fn();<br>spy.called.should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "d4b1cfa4-817a-4e71-b933-9bfe7c57cee7",
      "parentUUID": "fcfa4178-84f4-417e-b817-435967c47dcf",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The function returned by `promisify` should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br><span class=\"hljs-keyword\">var</span> fn = promisify(spy);<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>ret.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "c1be8f34-82fe-48ef-acee-85285d4ef608",
      "parentUUID": "fcfa4178-84f4-417e-b817-435967c47dcf",
      "skipped": false
    },
    {
      "title": "should be fulfilled when the stream ends",
      "fullTitle": "When the supplied function returns a stream, the promise returned by the wrapper should be fulfilled when the stream ends",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> stream = <span class=\"hljs-keyword\">new</span> events.EventEmitter();<br>stream.pipe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noop</span> (<span class=\"hljs-params\"></span>) </span>{};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> stream;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>stream.emit(<span class=\"hljs-string\">\"end\"</span>);<br><span class=\"hljs-keyword\">return</span> ret.should.be.fulfilled;",
      "isRoot": false,
      "uuid": "ecfada28-00d7-432c-8bbc-47944bfea62c",
      "parentUUID": "7c67d61c-eca2-4118-accd-dd70f342c5f3",
      "skipped": false
    },
    {
      "title": "should be rejected when the stream errors",
      "fullTitle": "When the supplied function returns a stream, the promise returned by the wrapper should be rejected when the stream errors",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> stream = <span class=\"hljs-keyword\">new</span> events.EventEmitter();<br>stream.pipe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noop</span> (<span class=\"hljs-params\"></span>) </span>{};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> stream;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>stream.emit(<span class=\"hljs-string\">\"error\"</span>);<br><span class=\"hljs-keyword\">return</span> ret.should.be.rejected;",
      "isRoot": false,
      "uuid": "1ee71fbc-c03a-4a5b-a09b-edab44c109c7",
      "parentUUID": "7c67d61c-eca2-4118-accd-dd70f342c5f3",
      "skipped": false
    },
    {
      "title": "should be the same promise proxied through",
      "fullTitle": "When the supplied function returns a promise, the promise returned by the wrapper should be the same promise proxied through",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = BPromise.resolve();<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> promise;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>ret.should.equal(promise);",
      "isRoot": false,
      "uuid": "65dc2a2b-72a2-4e3e-953d-645c40393f1c",
      "parentUUID": "11218c5c-0197-4816-9092-c65ebe3d4be3",
      "skipped": false
    },
    {
      "title": "should be a promise wrapper around that value",
      "fullTitle": "When the supplied function returns a value, the promise returned by the wrapper should be a promise wrapper around that value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> value = {};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> value;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br><span class=\"hljs-keyword\">return</span> ret.should.eventually.equal(value);",
      "isRoot": false,
      "uuid": "b59d7d76-889f-4b1f-be47-7349eca6130a",
      "parentUUID": "b71a1bd2-4267-48b7-a489-5ddf03ba6f9a",
      "skipped": false
    },
    {
      "title": "should throw",
      "fullTitle": "When the supplied function throws, the wrapper should throw",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> error = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">throw</span> error;<br>});<br>fn.should.throw(error);",
      "isRoot": false,
      "uuid": "445f5f9a-0db1-4751-9224-5a83424f1e23",
      "parentUUID": "1c0a6a13-8d17-4963-89fe-75a97983c2e9",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "The `task` method",
        "suites": [],
        "tests": [
          {
            "title": "should behave _like_ a getter when called with only one argument",
            "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
            "isRoot": false,
            "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          },
          {
            "title": "should behave _like_ a setter when called with more than one argument",
            "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/pro-gulp.js",
        "uuid": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
        "passes": [
          {
            "title": "should behave _like_ a getter when called with only one argument",
            "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
            "isRoot": false,
            "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          },
          {
            "title": "should behave _like_ a setter when called with more than one argument",
            "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      "ctx": {
        "_runnable": {
          "title": "should behave _like_ a setter when called with more than one argument",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
          "parent": {
            "title": "The `task` method",
            "suites": [],
            "tests": [
              {
                "title": "should behave _like_ a getter when called with only one argument",
                "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
                "isRoot": false,
                "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              },
              {
                "title": "should behave _like_ a setter when called with more than one argument",
                "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
                "isRoot": false,
                "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/pro-gulp.js",
            "uuid": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
            "passes": [
              {
                "title": "should behave _like_ a getter when called with only one argument",
                "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
                "isRoot": false,
                "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              },
              {
                "title": "should behave _like_ a setter when called with more than one argument",
                "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
                "isRoot": false,
                "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "duration": 1,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "should behave _like_ a setter when called with more than one argument",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
          "parent": {
            "title": "The `task` method",
            "suites": [],
            "tests": [
              {
                "title": "should behave _like_ a getter when called with only one argument",
                "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
                "isRoot": false,
                "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              },
              {
                "title": "should behave _like_ a setter when called with more than one argument",
                "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
                "isRoot": false,
                "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/pro-gulp.js",
            "uuid": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
            "passes": [
              {
                "title": "should behave _like_ a getter when called with only one argument",
                "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
                "isRoot": false,
                "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              },
              {
                "title": "should behave _like_ a setter when called with more than one argument",
                "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
                "isRoot": false,
                "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "duration": 1,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 0,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "The `task` method",
        "suites": [],
        "tests": [
          {
            "title": "should behave _like_ a getter when called with only one argument",
            "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
            "isRoot": false,
            "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          },
          {
            "title": "should behave _like_ a setter when called with more than one argument",
            "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/pro-gulp.js",
        "uuid": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
        "passes": [
          {
            "title": "should behave _like_ a getter when called with only one argument",
            "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
            "isRoot": false,
            "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          },
          {
            "title": "should behave _like_ a setter when called with more than one argument",
            "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
            "isRoot": false,
            "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
            "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      "ctx": {
        "_runnable": {
          "title": "should behave _like_ a setter when called with more than one argument",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
          "parent": {
            "title": "The `task` method",
            "suites": [],
            "tests": [
              {
                "title": "should behave _like_ a getter when called with only one argument",
                "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
                "isRoot": false,
                "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              },
              {
                "title": "should behave _like_ a setter when called with more than one argument",
                "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
                "isRoot": false,
                "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/pro-gulp.js",
            "uuid": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
            "passes": [
              {
                "title": "should behave _like_ a getter when called with only one argument",
                "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
                "isRoot": false,
                "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              },
              {
                "title": "should behave _like_ a setter when called with more than one argument",
                "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
                "isRoot": false,
                "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          "ctx": "[Circular ~.allHooks.1.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "duration": 1,
          "state": "passed",
          "speed": "fast"
        },
        "test": {
          "title": "should behave _like_ a setter when called with more than one argument",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "pending": false,
          "type": "test",
          "file": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
          "parent": {
            "title": "The `task` method",
            "suites": [],
            "tests": [
              {
                "title": "should behave _like_ a getter when called with only one argument",
                "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
                "isRoot": false,
                "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              },
              {
                "title": "should behave _like_ a setter when called with more than one argument",
                "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
                "isRoot": false,
                "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/pro-gulp.js",
            "uuid": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/pro-gulp.js",
            "passes": [
              {
                "title": "should behave _like_ a getter when called with only one argument",
                "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
                "isRoot": false,
                "uuid": "49919f8e-aa31-40d6-af50-5c22cba3aa26",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              },
              {
                "title": "should behave _like_ a setter when called with more than one argument",
                "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
                "isRoot": false,
                "uuid": "c68b8022-9b10-43dd-ac4e-87d7aaf3fbc2",
                "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2
          },
          "ctx": "[Circular ~.allHooks.1.ctx]",
          "_events": {},
          "_eventsCount": 1,
          "duration": 1,
          "state": "passed",
          "speed": "fast"
        }
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 0,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "The `log.start` function",
        "suites": [],
        "tests": [
          {
            "title": "should attach a Date object to the property `start` of its context",
            "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/log.js",
        "uuid": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
        "passes": [
          {
            "title": "should attach a Date object to the property `start` of its context",
            "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      "ctx": {
        "_runnable": {
          "title": "\"after each\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": {
            "title": "The `log.start` function",
            "suites": [],
            "tests": [
              {
                "title": "should attach a Date object to the property `start` of its context",
                "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/lib/log.js",
            "uuid": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
            "passes": [
              {
                "title": "should attach a Date object to the property `start` of its context",
                "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          "ctx": "[Circular ~.allHooks.2.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        },
        "test": {
          "title": "\"after each\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": {
            "title": "The `log.start` function",
            "suites": [],
            "tests": [
              {
                "title": "should attach a Date object to the property `start` of its context",
                "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/lib/log.js",
            "uuid": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
            "passes": [
              {
                "title": "should attach a Date object to the property `start` of its context",
                "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          "ctx": "[Circular ~.allHooks.2.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        }
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 1,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "The `log.start` function",
        "suites": [],
        "tests": [
          {
            "title": "should attach a Date object to the property `start` of its context",
            "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/log.js",
        "uuid": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
        "passes": [
          {
            "title": "should attach a Date object to the property `start` of its context",
            "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.3]",
        "test": "[Circular ~.allHooks.3]"
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 0,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "The `log.start` function",
        "suites": [],
        "tests": [
          {
            "title": "should attach a Date object to the property `start` of its context",
            "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/log.js",
        "uuid": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
        "passes": [
          {
            "title": "should attach a Date object to the property `start` of its context",
            "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      "ctx": {
        "_runnable": {
          "title": "\"after each\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": {
            "title": "The `log.start` function",
            "suites": [],
            "tests": [
              {
                "title": "should attach a Date object to the property `start` of its context",
                "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/lib/log.js",
            "uuid": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
            "passes": [
              {
                "title": "should attach a Date object to the property `start` of its context",
                "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          "ctx": "[Circular ~.allHooks.4.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        },
        "test": {
          "title": "\"after each\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": {
            "title": "The `log.start` function",
            "suites": [],
            "tests": [
              {
                "title": "should attach a Date object to the property `start` of its context",
                "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/lib/log.js",
            "uuid": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
            "passes": [
              {
                "title": "should attach a Date object to the property `start` of its context",
                "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
                "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1
          },
          "ctx": "[Circular ~.allHooks.4.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        }
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 1,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "The `log.start` function",
        "suites": [],
        "tests": [
          {
            "title": "should attach a Date object to the property `start` of its context",
            "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/log.js",
        "uuid": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
        "passes": [
          {
            "title": "should attach a Date object to the property `start` of its context",
            "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "64648d58-6abc-4da4-9b20-f25a5cc5416d",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d8c4f3d0-ecab-4858-96b2-0c0dc11a7ffb",
            "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.5]",
        "test": "[Circular ~.allHooks.5]"
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 0,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "The `log.end` function",
        "suites": [],
        "tests": [
          {
            "title": "should attach a Date object to the property `end` of its context",
            "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/log.js",
        "uuid": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
        "passes": [
          {
            "title": "should attach a Date object to the property `end` of its context",
            "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": {
          "title": "\"after each\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": {
            "title": "The `log.end` function",
            "suites": [],
            "tests": [
              {
                "title": "should attach a Date object to the property `end` of its context",
                "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/lib/log.js",
            "uuid": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
            "passes": [
              {
                "title": "should attach a Date object to the property `end` of its context",
                "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          "ctx": "[Circular ~.allHooks.6.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        },
        "test": {
          "title": "\"after each\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": {
            "title": "The `log.end` function",
            "suites": [],
            "tests": [
              {
                "title": "should attach a Date object to the property `end` of its context",
                "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/lib/log.js",
            "uuid": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
            "passes": [
              {
                "title": "should attach a Date object to the property `end` of its context",
                "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          "ctx": "[Circular ~.allHooks.6.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        }
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 0,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "The `log.end` function",
        "suites": [],
        "tests": [
          {
            "title": "should attach a Date object to the property `end` of its context",
            "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/log.js",
        "uuid": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
        "passes": [
          {
            "title": "should attach a Date object to the property `end` of its context",
            "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.7]",
        "test": "[Circular ~.allHooks.7]"
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 0,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "The `log.end` function",
        "suites": [],
        "tests": [
          {
            "title": "should attach a Date object to the property `end` of its context",
            "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/log.js",
        "uuid": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
        "passes": [
          {
            "title": "should attach a Date object to the property `end` of its context",
            "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": {
          "title": "\"after each\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": {
            "title": "The `log.end` function",
            "suites": [],
            "tests": [
              {
                "title": "should attach a Date object to the property `end` of its context",
                "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/lib/log.js",
            "uuid": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
            "passes": [
              {
                "title": "should attach a Date object to the property `end` of its context",
                "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          "ctx": "[Circular ~.allHooks.8.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        },
        "test": {
          "title": "\"after each\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": {
            "title": "The `log.end` function",
            "suites": [],
            "tests": [
              {
                "title": "should attach a Date object to the property `end` of its context",
                "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/lib/log.js",
            "uuid": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
            "passes": [
              {
                "title": "should attach a Date object to the property `end` of its context",
                "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
                "isRoot": false,
                "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              },
              {
                "title": "should call the `gulp-util.log` function",
                "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
                "isRoot": false,
                "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
                "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          "ctx": "[Circular ~.allHooks.8.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        }
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 0,
      "_error": null
    },
    {
      "title": "\"after each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": {
        "title": "The `log.end` function",
        "suites": [],
        "tests": [
          {
            "title": "should attach a Date object to the property `end` of its context",
            "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/lib/log.js",
        "uuid": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
        "fullFile": "/Users/pscanf/mondora/pro-gulp/test/lib/log.js",
        "passes": [
          {
            "title": "should attach a Date object to the property `end` of its context",
            "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
            "isRoot": false,
            "uuid": "63f5337f-62ad-499a-9ec7-1c329c21835a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          },
          {
            "title": "should call the `gulp-util.log` function",
            "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "97f913c4-e461-408b-8ff3-d1569f72109a",
            "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      "ctx": {
        "_runnable": "[Circular ~.allHooks.9]",
        "test": "[Circular ~.allHooks.9]"
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 0,
      "_error": null
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should behave _like_ a getter when called with only one argument",
      "fullTitle": "The `task` method should behave _like_ a getter when called with only one argument",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> tasks = {<br>    name: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}<br>};<br>proGulp.__set__(<span class=\"hljs-string\">\"tasks\"</span>, tasks);<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.equal(tasks.name);",
      "isRoot": false,
      "uuid": "6bb6076f-982e-4ba8-bf03-055a20df8d3a",
      "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
      "skipped": false
    },
    {
      "title": "should behave _like_ a setter when called with more than one argument",
      "fullTitle": "The `task` method should behave _like_ a setter when called with more than one argument",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>).should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "f4855acf-f1ae-47c4-a99c-8d30c099b9a0",
      "parentUUID": "63bd55c3-4ea7-4c4f-93e9-85a9ebf5f24a",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The function returned by the `task` method should return a promise",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "proGulp.task(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{});<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().should.be.a.Promise;",
      "isRoot": false,
      "uuid": "fb67d9b2-ae2c-455b-866e-7a7baa999583",
      "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
      "skipped": false
    },
    {
      "title": "should call the function(s) passed as second (and third) argument [1 function]",
      "fullTitle": "The function returned by the `task` method should call the function(s) passed as second (and third) argument [1 function]",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spy_0 = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>, spy_0);<br><span class=\"hljs-keyword\">return</span> proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy_0.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
      "isRoot": false,
      "uuid": "cae4fe69-88cd-4723-974d-8b16205173bb",
      "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
      "skipped": false
    },
    {
      "title": "should call the function(s) passed as second (and third) argument [2 functions]",
      "fullTitle": "The function returned by the `task` method should call the function(s) passed as second (and third) argument [2 functions]",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spy_0 = sinon.spy();<br><span class=\"hljs-keyword\">var</span> spy_1 = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"name\"</span>, spy_0, spy_1);<br><span class=\"hljs-keyword\">return</span> proGulp.task(<span class=\"hljs-string\">\"name\"</span>)().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy_0.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spy_1.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
      "isRoot": false,
      "uuid": "09729d03-7403-48af-a8ea-6e661adb6b47",
      "parentUUID": "f6bc25a5-596a-4a49-9919-bb823f979562",
      "skipped": false
    },
    {
      "title": "should return a function",
      "fullTitle": "The `parallel` method should return a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.parallel();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "2c02280e-a51f-4618-a7cb-d93398a313a4",
      "parentUUID": "f23b3827-7f1b-413b-a8d8-1849aa86b308",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The function returned by the `parallel` method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.parallel([]);<br>ret().should.be.a.Promise;",
      "isRoot": false,
      "uuid": "5d0c6dc0-6ebe-49a9-9702-ee53db360753",
      "parentUUID": "506b8f2a-8907-4392-ba63-ff9a8a8bbd7b",
      "skipped": false
    },
    {
      "title": "should execute tasks in parallel (order does not matter)",
      "fullTitle": "The function returned by the `parallel` method should execute tasks in parallel (order does not matter)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br>proGulp.task(<span class=\"hljs-string\">\"task_0\"</span>, spy);<br>proGulp.task(<span class=\"hljs-string\">\"task_1\"</span>, spy);<br><span class=\"hljs-keyword\">var</span> ret = proGulp.parallel([<span class=\"hljs-string\">\"task_0\"</span>, <span class=\"hljs-string\">\"task_1\"</span>]);<br><span class=\"hljs-keyword\">return</span> ret().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    spy.calledTwice.should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
      "isRoot": false,
      "uuid": "01b119ae-5a48-45bb-83b0-eb87cb5895dc",
      "parentUUID": "506b8f2a-8907-4392-ba63-ff9a8a8bbd7b",
      "skipped": false
    },
    {
      "title": "should return a function",
      "fullTitle": "The `sequence` method should return a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.sequence();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "f9fe6aab-37d6-4be0-a35c-82aa720d8c0d",
      "parentUUID": "43b43938-48c5-49f2-b7d0-758cd8c51e9b",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The function returned by the `sequence` method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = proGulp.sequence([]);<br>ret().should.be.a.Promise;",
      "isRoot": false,
      "uuid": "e0d71149-7592-480f-835b-8ab999a56e79",
      "parentUUID": "7fa7156d-969c-43b9-82f8-2cd62631d241",
      "skipped": false
    },
    {
      "title": "should execute tasks in sequence (order does matter)",
      "fullTitle": "The function returned by the `sequence` method should execute tasks in sequence (order does matter)",
      "timedOut": false,
      "duration": 423,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spies = [];<br><span class=\"hljs-keyword\">var</span> getTime = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">var</span> timestamp = process.hrtime();<br>    <span class=\"hljs-keyword\">return</span> timestamp[<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">1e9</span> + timestamp[<span class=\"hljs-number\">1</span>];<br>};<br><span class=\"hljs-keyword\">var</span> createSpy = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">n</span>) </span>{<br>    spies[n] = {};<br>    spies[n].fn = sinon.spy(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        spies[n].start = getTime();<br>        <span class=\"hljs-keyword\">return</span> BPromise.delay(<span class=\"hljs-number\">100</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>            spies[n].end = getTime();<br>        });<br>    });<br>};<br>createSpy(<span class=\"hljs-number\">0</span>);<br>createSpy(<span class=\"hljs-number\">1</span>);<br>createSpy(<span class=\"hljs-number\">2</span>);<br>createSpy(<span class=\"hljs-number\">3</span>);<br>proGulp.task(<span class=\"hljs-string\">\"task_0\"</span>, spies[<span class=\"hljs-number\">0</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_1\"</span>, spies[<span class=\"hljs-number\">1</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_2\"</span>, spies[<span class=\"hljs-number\">2</span>].fn);<br>proGulp.task(<span class=\"hljs-string\">\"task_3\"</span>, spies[<span class=\"hljs-number\">3</span>].fn);<br><span class=\"hljs-keyword\">var</span> ret = proGulp.sequence([<br>    <span class=\"hljs-string\">\"task_0\"</span>,<br>    <span class=\"hljs-string\">\"task_1\"</span>,<br>    <span class=\"hljs-string\">\"task_2\"</span>,<br>    <span class=\"hljs-string\">\"task_3\"</span><br>]);<br><span class=\"hljs-keyword\">return</span> ret().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-comment\">// Check they have been called</span><br>    spies[<span class=\"hljs-number\">0</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">1</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">2</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    spies[<span class=\"hljs-number\">3</span>].fn.called.should.equal(<span class=\"hljs-literal\">true</span>);<br>    <span class=\"hljs-comment\">// Check they have been called in the right order</span><br>    (spies[<span class=\"hljs-number\">0</span>].start &lt; spies[<span class=\"hljs-number\">0</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">0</span>].end &lt; spies[<span class=\"hljs-number\">1</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">1</span>].start &lt; spies[<span class=\"hljs-number\">1</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">1</span>].end &lt; spies[<span class=\"hljs-number\">2</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">2</span>].start &lt; spies[<span class=\"hljs-number\">2</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">2</span>].end &lt; spies[<span class=\"hljs-number\">3</span>].start).should.equal(<span class=\"hljs-literal\">true</span>);<br>    (spies[<span class=\"hljs-number\">3</span>].start &lt; spies[<span class=\"hljs-number\">3</span>].end).should.equal(<span class=\"hljs-literal\">true</span>);<br>});",
      "isRoot": false,
      "uuid": "842f4f74-8e1a-4ab5-8cdf-aba8e64a5e6d",
      "parentUUID": "7fa7156d-969c-43b9-82f8-2cd62631d241",
      "skipped": false
    },
    {
      "title": "should attach a Date object to the property `start` of its context",
      "fullTitle": "The `log.start` function should attach a Date object to the property `start` of its context",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {};<br>log.start.call(ctx);<br>ctx.start.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
      "isRoot": false,
      "uuid": "2896cbe0-a840-4037-9c59-38e275a54793",
      "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
      "skipped": false
    },
    {
      "title": "should call the `gulp-util.log` function",
      "fullTitle": "The `log.start` function should call the `gulp-util.log` function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "log.start.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Starting/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "89dfbef0-861c-488e-8f91-6b473eff1619",
      "parentUUID": "e56633ae-3007-4cdf-bb2c-f4b5c18c3924",
      "skipped": false
    },
    {
      "title": "should attach a Date object to the property `end` of its context",
      "fullTitle": "The `log.end` function should attach a Date object to the property `end` of its context",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ctx = {<br>    start: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>};<br>log.end.call(ctx);<br>ctx.end.should.be.instanceOf(<span class=\"hljs-built_in\">Date</span>);",
      "isRoot": false,
      "uuid": "41e21adf-a4ec-4200-a5ce-1d316a317b08",
      "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
      "skipped": false
    },
    {
      "title": "should call the `gulp-util.log` function",
      "fullTitle": "The `log.end` function should call the `gulp-util.log` function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "log.end.call({});<br>util.log.calledWithMatch(<span class=\"hljs-regexp\">/Finished/</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "30595d54-90b0-4bb0-9f9d-6f59905f32f8",
      "parentUUID": "0bee28ce-9ae1-40ca-b1ae-f76d9c9bcf01",
      "skipped": false
    },
    {
      "title": "should returned a function",
      "fullTitle": "The `promisify` function should returned a function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> ret = promisify();<br>ret.should.be.of.type(<span class=\"hljs-string\">\"function\"</span>);",
      "isRoot": false,
      "uuid": "d68a166a-ae87-4cdd-afd4-f7cb50f8226b",
      "parentUUID": "77fcc2aa-77bd-4e95-b934-9e7a42e6160d",
      "skipped": false
    },
    {
      "title": "should invoke the function supplied to `promisify`, when called",
      "fullTitle": "The function returned by `promisify` should invoke the function supplied to `promisify`, when called",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br><span class=\"hljs-keyword\">var</span> fn = promisify(spy);<br>fn();<br>spy.called.should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "c950b98c-84be-472a-b691-d9261e8f1013",
      "parentUUID": "fcfa4178-84f4-417e-b817-435967c47dcf",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The function returned by `promisify` should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> spy = sinon.spy();<br><span class=\"hljs-keyword\">var</span> fn = promisify(spy);<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>ret.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "80e5909b-3b72-4e3d-a98b-b0a1c19870aa",
      "parentUUID": "fcfa4178-84f4-417e-b817-435967c47dcf",
      "skipped": false
    },
    {
      "title": "should be fulfilled when the stream ends",
      "fullTitle": "When the supplied function returns a stream, the promise returned by the wrapper should be fulfilled when the stream ends",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> stream = <span class=\"hljs-keyword\">new</span> events.EventEmitter();<br>stream.pipe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noop</span> (<span class=\"hljs-params\"></span>) </span>{};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> stream;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>stream.emit(<span class=\"hljs-string\">\"end\"</span>);<br><span class=\"hljs-keyword\">return</span> ret.should.be.fulfilled;",
      "isRoot": false,
      "uuid": "f1859b08-04d6-4e43-b253-82763cb86d8a",
      "parentUUID": "7c67d61c-eca2-4118-accd-dd70f342c5f3",
      "skipped": false
    },
    {
      "title": "should be rejected when the stream errors",
      "fullTitle": "When the supplied function returns a stream, the promise returned by the wrapper should be rejected when the stream errors",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> stream = <span class=\"hljs-keyword\">new</span> events.EventEmitter();<br>stream.pipe = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">noop</span> (<span class=\"hljs-params\"></span>) </span>{};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> stream;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>stream.emit(<span class=\"hljs-string\">\"error\"</span>);<br><span class=\"hljs-keyword\">return</span> ret.should.be.rejected;",
      "isRoot": false,
      "uuid": "8a7f7069-8757-4514-911e-c84999307f69",
      "parentUUID": "7c67d61c-eca2-4118-accd-dd70f342c5f3",
      "skipped": false
    },
    {
      "title": "should be the same promise proxied through",
      "fullTitle": "When the supplied function returns a promise, the promise returned by the wrapper should be the same promise proxied through",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = BPromise.resolve();<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> promise;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br>ret.should.equal(promise);",
      "isRoot": false,
      "uuid": "db0fde22-3dcc-4acc-b61d-23db1c1d46f3",
      "parentUUID": "11218c5c-0197-4816-9092-c65ebe3d4be3",
      "skipped": false
    },
    {
      "title": "should be a promise wrapper around that value",
      "fullTitle": "When the supplied function returns a value, the promise returned by the wrapper should be a promise wrapper around that value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> value = {};<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">return</span> value;<br>});<br><span class=\"hljs-keyword\">var</span> ret = fn();<br><span class=\"hljs-keyword\">return</span> ret.should.eventually.equal(value);",
      "isRoot": false,
      "uuid": "63c15de8-0612-4388-8d31-772300adcbec",
      "parentUUID": "b71a1bd2-4267-48b7-a489-5ddf03ba6f9a",
      "skipped": false
    },
    {
      "title": "should throw",
      "fullTitle": "When the supplied function throws, the wrapper should throw",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> error = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();<br><span class=\"hljs-keyword\">var</span> fn = promisify(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>    <span class=\"hljs-keyword\">throw</span> error;<br>});<br>fn.should.throw(error);",
      "isRoot": false,
      "uuid": "f310fb4a-4205-4f1a-a251-3368699e57bf",
      "parentUUID": "1c0a6a13-8d17-4963-89fe-75a97983c2e9",
      "skipped": false
    }
  ],
  "allFailures": []
}